version: '3.7'

#volumes:
#  cache:
#      name: mapproxy_cache

networks:
  proxy:
    name: ${NETWORK_NAME}
    external: true

services:

  server:
    image: nginx:latest
    expose:
      - 80
    env_file:
      - .env
    volumes:
      # Override the standard file, so we can load the image_filter module.
      - ./nginx_image_filter.conf:/etc/nginx/nginx.conf
      - ./host.conf:/etc/nginx/conf.d/default.conf
      - ./static_content:/srv/static:ro
      - /media/photoshow:/srv/img:ro
    labels:
      caddy: ${SERVER}.${DOMAIN}
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.tls.protocols: "tls1.3"
    networks:
      - proxy

# I put a second server here during testing
# but don't need it right now so it's commented out.
#  server2:
#    image: nginx:latest
#    expose:
#      - 80
#    env_file:
#      - .env
#    volumes:
#      - ./content_for_server2:/usr/share/nginx/html
#    labels:
#      caddy: maps.${DOMAIN}
#      caddy.reverse_proxy: "{{upstreams 80}}"
#      caddy.tls.protocols: "tls1.3"
#    networks:
#      - proxy

#  mapproxy:
#    image: wildsong/mapproxy_server:latest
#    build:
#      context: .
#      dockerfile: Dockerfile.mapproxy_server
#    expose: 
#      - 8080
#    env_file: 
#      - .env
#    volumes:
#      - ./mapproxy_config:/srv/mapproxy/config:ro
#      - cache:/srv/mapproxy/cache
#    # This will be passed to start_mapproxy.py and
#    # points to a folder, so mapproxy will start as a multiservice.
#    command: ['/srv/mapproxy/config/services']
#    networks:
#      proxy:
#        aliases:
#          - mapproxy
      

